@{
    ViewData["Title"] = "Name32434";
}
@model business.Application.Web.Models.Notes.NoteListViewModel

<div class="wrapper">
    <div class="tags">
        @foreach (var note in Model.Tags)
        {
            <div class="tag" asp-route-id="@note.Id">@note.Name</div>
        }
        <div class="new-tag" onclick="addNewTag()">+</div>
    </div>

    <div class="flexDiv">
        @foreach (var note in Model.Notes)
        {
            <div class="card" data-tags="@note.TagName">
                <span class="editable" asp-route-id="@note.Id"><pre>@note.Text</pre></span>
                <div class="subtag" asp-route-subtagid="@note.TagId">@note.TagName</div>
            </div>
        }
        <div class="new-card" onclick="addNewCard()">
            <div style="margin-top: 45%;">
                +
            </div>
        </div>

    </div>

</div>

<script>
    //Скрыть карточки с тегом по нажатию
    function closeCardsByClickTag() {
        const tags = document.querySelectorAll('.tag');
        tags.forEach(tag => {
            tag.addEventListener('click', () => {
                const cards = document.querySelectorAll('.card');
                cards.forEach(card => {
                    if (card.dataset.tags.includes(tag.innerText)) {
                        card.classList.toggle('hidden');
                    }
                });
            });
        });
    }

    function closeCardsByClickTag() {
        document.querySelectorAll('.editable').forEach(editable => {
            let oldName = editable.textContent;
            editable.addEventListener('dblclick', () => {
                editable.contentEditable = 'true';
                editable.focus();
                oldName = editable.textContent;
            });

            editable.addEventListener('blur', () => {
                editable.contentEditable = 'false';
                const updatedText = editable.textContent;
                if (oldName === updatedText) {
                    return;
                }
                alert(oldName + " " + updatedText);
                const cardId = editable.getAttribute('asp-route-id');
                // Ищем ближайший родительский элемент с классом card
                const cardElement = editable.closest('.card');
                // Ищем элемент с классом subtag внутри найденного cardElement
                const subtagElement = cardElement.querySelector('.subtag');
                
                const tagId = subtagElement.getAttribute('asp-route-subtagid');
                //jQuery Update Note
                $.ajax({
                    type: "POST",
                    url: "/Notes/EditNote",
                    data: { Id: cardId,
                        Text: updatedText,
                        TagId: tagId
                    },
                    success: function (response) {
                        console.log("Тег успешно добавлен на сервер");
                    },
                    error: function (error) {
                        console.error("Произошла ошибка при добавлении тега на сервер");
                    }
                });
                // Здесь можно отправить updatedText на контроллер для обновления заметки
            });
        });
    }
    //Теги ----------------- сомнительно
    /*
    //Свойства тегов
    //При потере фокуса удаляется текст
    document.querySelector('.t').addEventListener('blur', function () {
        if (this.textContent.trim() === "") {
            this.classList.remove('editable');
        } else {
            // Add logic to save new tag and update UI
            this.classList.remove('editable');
        }
    });
    document.querySelector('.t').addEventListener('click', function () {
        this.textContent = "";
        this.classList.add('editable');
        this.focus();
    });
    // ограничение на новую строку и 15 символов
    document.querySelector('.t').addEventListener('keydown', function (event) {
        if (event.key === '\n') {
            event.preventDefault();
        }
        if (this.textContent.length > 15) {
            this.textContent = this.textContent.slice(0, 15);
        }
        if (this.textContent.length >= 16) {
            event.preventDefault();
        }
    });*/

    function addNewCard() {
        var newCard = document.createElement("div");
        newCard.classList.add("card");
        newCard.setAttribute('data-tags', "Новый тег");

        var newCardContent = document.createElement("span");
        newCardContent.classList.add("editable");
        newCardContent.setAttribute("contenteditable", "true");
        newCardContent.textContent = "Новая задача";


        var newCardSubtag = document.createElement("div");
        newCardSubtag.classList.add("subtag");
        newCardSubtag.textContent = "Новый тег";

        newCard.appendChild(newCardContent);
        newCard.appendChild(newCardSubtag);

        document.querySelector(".flexDiv").insertBefore(newCard, document.querySelector(".new-card"));
        updateToggleCards();
        updateToggleCards();
        editSubTagText();

        //jQuery Add Note
        $.ajax({
            type: "POST",
            url: "/Notes/AddNewNote", 
            data: { Text: "Новая задача" }, 
            success: function (response) {
                console.log("Тег успешно добавлен на сервер");
            },
            error: function (error) {
                console.error("Произошла ошибка при добавлении тега на сервер");
            }
        });

    }
    function addNewTag() {
        var newTag = document.createElement("div");
        newTag.classList.add("tag");
        newTag.textContent = "Новый тег";
        document.querySelector(".tags").insertBefore(newTag, document.querySelector(".new-tag"));

        updateToggleCards();

        editTagText();

        //jQuery Add Tag
        $.ajax({
            type: "POST",
            url: "/Notes/AddNewTag", 
            data: { Name: "Новый тег" }, 
            success: function (response) {
                console.log("Тег успешно добавлен на сервер");
            },
            error: function (error) {
                console.error("Произошла ошибка при добавлении тега на сервер");
            }
        });

    }
    function updateToggleCards() {
        closeCardsByClickTag();
    }

    function editTagText() {
        document.querySelectorAll('.tag').forEach(tag => {
            let oldName = tag.textContent;
            tag.addEventListener('dblclick', () => {
                tag.setAttribute('contenteditable', 'true');
                tag.focus();
                oldName = tag.textContent;
            });

            tag.addEventListener('blur', () => {
                tag.removeAttribute('contenteditable');
                const newSubtagValue = tag.textContent.trim();
                if (newSubtagValue === "") {
                    const tagId = tag.getAttribute('asp-route-id');
                    tag.remove();
                    //jQuery Delete Tag
                    $.ajax({
                        type: "POST",
                        url: "/Notes/DeleteTag",
                        data: {
                            Id: tagId
                        }, 
                        success: function (response) {
                            console.log("Тег успешно удалён");
                        },
                        error: function (error) {
                            console.error("Произошла ошибка при удалении тега");
                        }
                    });
                    return;
                }
                tag.textContent = newSubtagValue;
                if (newSubtagValue === oldName) {
                    return;
                }
                const associatedSubTags = document.querySelectorAll(`.card[data-tags="${oldName}"] .subtag`);
                if (associatedSubTags) {
                    associatedSubTags.forEach(subtag => {
                        subtag.textContent = newSubtagValue;
                    })
                }
                const associatedCards = document.querySelectorAll(`.card[data-tags="${oldName}"]`);
                associatedCards.forEach(card => {
                    card.setAttribute('data-tags', newSubtagValue);

                });
                const tagId = tag.getAttribute('asp-route-id');
                //jQuery Update Tag
                $.ajax({
                    type: "POST",
                    url: "/Notes/EditTag", 
                    data: { Id: tagId,
                            Name: newSubtagValue}, 
                    success: function (response) {
                        console.log("Тег успешно обновлен");
                    },
                    error: function (error) {
                        console.error("Произошла ошибка при обновлении тега");
                    }
                });
            });

        });
    }
    function editSubTagText() {
        document.querySelectorAll('.subtag').forEach(tag => {
            const oldName = tag.textContent;
            tag.addEventListener('dblclick', () => {
                tag.setAttribute('contenteditable', 'true');
                tag.focus();
            });
            tag.addEventListener('blur', () => {
                tag.removeAttribute('contenteditable');
                const newSubtagValue = tag.textContent.trim();

                const associatedCards = tag.parentElement;
                associatedCards.setAttribute('data-tags', newSubtagValue);
            });

        });
    }

    closeCardsByClickTag();

    editTagText();
    editSubTagText();
</script>

